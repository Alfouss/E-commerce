{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jumo\\\\Documents\\\\Project\\\\e-commerce\\\\mon-app\\\\src\\\\component\\\\Card.js\";\nimport { Elements, CardElement, CardNumberElement, ElementsConsumer } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport React from 'react';\nconst stripePromise = loadStripe('pk_test_JJ1eMdKN0Hp4UFJ6kWXWO4ix00jtXzq5XG');\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = async event => {\n      // Block native form submission.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not loaded yet. Make sure to disable\n        // form submission until Stripe.js has loaded.\n        return;\n      } // Get a reference to a mounted CardElement. Elements knows how\n      // to find your CardElement because there can only ever be one of\n      // each type of element.\n\n\n      const cardElement = elements.getElement(CardElement);\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement\n      });\n\n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('[PaymentMethod]', paymentMethod);\n      }\n    };\n  }\n\n  render() {\n    const {\n      stripe\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Elements, {\n      stripe: stripePromise,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardElement, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, \"Pay\"));\n  }\n\n}\n\nconst InjectedCheckoutForm = () => {\n  return /*#__PURE__*/React.createElement(ElementsConsumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, ({\n    elements,\n    stripe\n  }) => /*#__PURE__*/React.createElement(CheckoutForm, {\n    elements: elements,\n    stripe: stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/Jumo/Documents/Project/e-commerce/mon-app/src/component/Card.js"],"names":["Elements","CardElement","CardNumberElement","ElementsConsumer","loadStripe","React","stripePromise","CheckoutForm","Component","handleSubmit","event","preventDefault","stripe","elements","props","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","render","InjectedCheckoutForm"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,WAAlB,EAA+BC,iBAA/B,EAAkDC,gBAAlD,QAAyE,yBAAzE;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,aAAa,GAAGF,UAAU,CAAC,4CAAD,CAAhC;;AAEA,MAAMG,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACvCC,YADuC,GACxB,MAAOC,KAAP,IAAiB;AAC9B;AACAA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAqB,KAAKC,KAAhC;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD,OAV6B,CAY9B;AACA;AACA;;;AACA,YAAME,WAAW,GAAGF,QAAQ,CAACG,UAAT,CAAoBf,WAApB,CAApB;AAEA,YAAM;AAACgB,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAAyB,MAAMN,MAAM,CAACO,mBAAP,CAA2B;AAC9DC,QAAAA,IAAI,EAAE,MADwD;AAE9DC,QAAAA,IAAI,EAAEN;AAFwD,OAA3B,CAArC;;AAKA,UAAIE,KAAJ,EAAW;AACTK,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;AACD,OAFD,MAEO;AACLK,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,aAA/B;AACD;AACF,KA5BsC;AAAA;;AA8BvCM,EAAAA,MAAM,GAAG;AACP,UAAM;AAACZ,MAAAA;AAAD,QAAW,KAAKE,KAAtB;AACA,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKL,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEH,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAKE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAACM,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,CADF;AAWD;;AA3CsC;;AA8CzC,MAAMa,oBAAoB,GAAG,MAAM;AACjC,sBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAACZ,IAAAA,QAAD;AAAWD,IAAAA;AAAX,GAAD,kBACC,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEC,QAAxB;AAAkC,IAAA,MAAM,EAAED,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF;AAOD,CARD;;AAUF,eAAeL,YAAf","sourcesContent":["import {Elements, CardElement, CardNumberElement, ElementsConsumer} from '@stripe/react-stripe-js';\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport React from 'react'\r\n\r\n\r\nconst stripePromise = loadStripe('pk_test_JJ1eMdKN0Hp4UFJ6kWXWO4ix00jtXzq5XG');\r\n\r\nclass CheckoutForm extends React.Component {\r\n    handleSubmit = async (event) => {\r\n      // Block native form submission.\r\n      event.preventDefault();\r\n  \r\n      const {stripe, elements} = this.props;\r\n  \r\n      if (!stripe || !elements) {\r\n        // Stripe.js has not loaded yet. Make sure to disable\r\n        // form submission until Stripe.js has loaded.\r\n        return;\r\n      }\r\n  \r\n      // Get a reference to a mounted CardElement. Elements knows how\r\n      // to find your CardElement because there can only ever be one of\r\n      // each type of element.\r\n      const cardElement = elements.getElement(CardElement);\r\n  \r\n      const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n        type: 'card',\r\n        card: cardElement,\r\n      });\r\n  \r\n      if (error) {\r\n        console.log('[error]', error);\r\n      } else {\r\n        console.log('[PaymentMethod]', paymentMethod);\r\n      }\r\n    };\r\n  \r\n    render() {\r\n      const {stripe} = this.props;\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n            <Elements stripe={stripePromise}>\r\n                <CardElement />\r\n\r\n            </Elements>\r\n          <button type=\"submit\" disabled={!stripe}>\r\n            Pay\r\n          </button>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const InjectedCheckoutForm = () => {\r\n    return (\r\n      <ElementsConsumer>\r\n        {({elements, stripe}) => (\r\n          <CheckoutForm elements={elements} stripe={stripe} />\r\n        )}\r\n      </ElementsConsumer>\r\n    );\r\n  };\r\n\r\nexport default CheckoutForm ;"]},"metadata":{},"sourceType":"module"}